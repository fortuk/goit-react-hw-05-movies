{"version":3,"file":"static/js/movie-details-view.53d1981e.chunk.js","mappings":"wSAAMA,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,qCACaC,IAIrC,SAASY,EAAiBC,GAC/B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBAC0Ba,EAD1B,+CAKxB,SAASC,EAAeC,GAC7B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,oBACQf,EADR,oBAKxB,SAASgB,EAAeD,GAC7B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,oBAKxB,SAASiB,EAAkBF,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,sB,iIClC/B,EAAyB,iCAAzB,EAAiE,+BAAjE,EAA6G,qC,SCavGkB,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,iCAC3BC,GAAcD,EAAAA,EAAAA,OAAK,kBAAM,iCAEhB,SAASE,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsBC,EAAAA,EAAAA,MAAdzB,EAAR,EAAQA,IAAK0B,EAAb,EAAaA,KACPC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBR,EAAAA,EAAAA,UAAS,KAAjC,eAAOS,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAmBd,GAASe,MAAK,SAAAZ,GAC/BC,EAASD,QAEV,CAACH,IAYJ,OANAa,EAAAA,EAAAA,YAAU,WACJJ,EAASO,OACXJ,EAAQH,EAASO,MAAML,QAExB,CAACF,KAGF,8BACGN,IACC,iCACE,mBAAQc,UAAWC,EAAUC,KAAK,SAASC,QAdpC,WACbb,EAAQc,KAAKV,IAaP,sBAGA,gBACEW,IAAG,yCAAoCnB,EAAMoB,aAC7CC,IAAKrB,EAAMsB,SAEb,wBAAKtB,EAAMsB,SACX,yCACc,0BAAOtB,EAAMuB,mBAE3B,sCACW,0BAAOvB,EAAMwB,eAExB,kCACS,KACP,0BAAOxB,EAAMyB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,WAEpD,oDAEA,4BACE,SAAC,KAAD,CACEC,GAAE,UAAKrD,EAAL,SACFqC,UAAWC,EACXgB,gBAAiBhB,EAHnB,mBAOA,SAAC,KAAD,CACEe,GAAE,UAAKrD,EAAL,YACFqC,UAAWC,EACXgB,gBAAiBhB,EAHnB,yBASF,SAAC,EAAAiB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAO9B,KAAI,UAAKA,EAAL,SAAX,UACE,SAACV,EAAD,CAAeI,QAASA,OAG1B,SAAC,KAAD,CAAOM,KAAI,UAAKA,EAAL,YAAX,UACE,SAACR,EAAD,CAAaE,QAASA","sources":["services/api.jsx","webpack://goit-react-hw-05-movies/./src/views/MovieDetailsView/MovieDetailsView.module.css?8dcd","views/MovieDetailsView/MovieDetailsView.jsx"],"sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d752e046a9268238157ca8971cc96b61\";\n\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok  \n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchSearchQuery(searchQuery) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCast(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"MovieDetailsView_button__h61ak\",\"link\":\"MovieDetailsView_link__23eYP\",\"activeLink\":\"MovieDetailsView_activeLink__eK1DM\"};","import { useState, useEffect, lazy, Suspense } from 'react';\nimport {\n  useParams,\n  useLocation,\n  useHistory,\n  useRouteMatch,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport * as api from '../../services/api';\nimport Loader from 'react-loader-spinner';\nimport s from './MovieDetailsView.module.css';\n\nconst MovieCastView = lazy(() => import('../MovieCast/MovieCastView'));\nconst MovieReview = lazy(() => import('../MovieReview/MovieReviewsView'));\n\nexport default function MovieDetailsView() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const { url, path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n  const [from, setFrom] = useState('/');\n\n  useEffect(() => {\n    api.fetchMovieById(movieId).then(movie => {\n      setMovie(movie);\n    });\n  }, [movieId]);\n\n  const goBack = () => {\n    history.push(from);\n  };\n\n  useEffect(() => {\n    if (location.state) {\n      setFrom(location.state.from);\n    }\n  }, [location]);\n\n  return (\n    <>\n      {movie && (\n        <>\n          <button className={s.button} type=\"button\" onClick={goBack}>\n            Go back\n          </button>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n            alt={movie.title}\n          />\n          <h2>{movie.title}</h2>\n          <p>\n            User Score: <span>{movie.vote_average}</span>\n          </p>\n          <p>\n            Overview <span>{movie.overview}</span>\n          </p>\n          <p>\n            Genres{' '}\n            <span>{movie.genres.map(genre => genre.name).join(' ')}</span>\n          </p>\n          <h3>Additional information</h3>\n\n          <nav>\n            <NavLink\n              to={`${url}/cast`}\n              className={s.link}\n              activeClassName={s.activeLink}\n            >\n              Cast\n            </NavLink>\n            <NavLink\n              to={`${url}/reviews`}\n              className={s.link}\n              activeClassName={s.activeLink}\n            >\n              Reviews\n            </NavLink>\n          </nav>\n\n          <Suspense fallback={<Loader />}>\n            <Switch>\n              <Route path={`${path}/cast`}>\n                <MovieCastView movieId={movieId} />\n              </Route>\n\n              <Route path={`${path}/reviews`}>\n                <MovieReview movieId={movieId} />\n              </Route>\n            </Switch>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchQuery","searchQuery","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","MovieCastView","lazy","MovieReview","MovieDetailsView","movieId","useParams","useState","movie","setMovie","useRouteMatch","path","history","useHistory","location","useLocation","from","setFrom","useEffect","api","then","state","className","s","type","onClick","push","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","join","to","activeClassName","Suspense","fallback"],"sourceRoot":""}