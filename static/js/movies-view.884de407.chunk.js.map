{"version":3,"file":"static/js/movies-view.884de407.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieItem/MovieItem.module.css?431a","components/MovieItem/MovieItem.jsx","services/api.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","views/MoviesView/MoviesView.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieItem_list__wzdJ-\",\"movieItem\":\"MovieItem_movieItem__2LkR+\",\"movieImage\":\"MovieItem_movieImage__Atx+F\"};","import { Link, useLocation } from 'react-router-dom';\r\nimport s from './MovieItem.module.css';\r\nimport propTypes from 'prop-types';\r\n\r\nconst MovieItem = ({ movies }) => {\r\n  const location = useLocation();\r\n  return (\r\n    <ul className={s.list}>\r\n      {movies.map((movie) => (\r\n        <li key={movie.id} className={s.movieItem}>\r\n          <Link\r\n            to={{\r\n              pathname: `/movies/${movie.id}`,\r\n              state: { from: location },\r\n            }}\r\n          >\r\n            <img\r\n              className={s.movieImage}\r\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n              alt={movie.name}\r\n              width=\"320\"\r\n            />\r\n            <p>{movie.name}</p>\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nMovieItem.propTypes = {\r\n  movies: propTypes.arrayOf(\r\n    propTypes.shape({\r\n      id: propTypes.number.isRequired,\r\n      name: propTypes.string.isRequired,\r\n      poster_path: propTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\nexport default MovieItem;\r\n","const BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"d752e046a9268238157ca8971cc96b61\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok  \r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchTrendingMovies() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchSearchQuery(searchQuery) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\r\n  );\r\n}\r\n\r\nexport function fetchMovieById(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchMovieCast(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchMovieReviews(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBar_searchbar__tqPcS\",\"searchForm\":\"SearchBar_searchForm__NPKAn\",\"button\":\"SearchBar_button__YHy-C\",\"buttonLabel\":\"SearchBar_buttonLabel__XRxCP\",\"input\":\"SearchBar_input__4B500\"};","import { useState } from 'react';\r\nimport { GoSearch } from 'react-icons/go';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport propTypes from 'prop-types';\r\nimport s from './SearchBar.module.css';\r\n\r\nconst SearchBar = ({ onClick }) => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search).get(\"query\");\r\n    const [searchQuery, setSearchQuery] = useState(searchParams ?? \"\");\r\n\r\n    const handleChange = (e) => {\r\n        setSearchQuery(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (searchQuery.trim() === \"\") {\r\n            toast.error(\"Enter query in the search field.\");\r\n            return;\r\n        }\r\n        onClick(searchQuery);\r\n    };\r\n\r\n    return (\r\n        <header className={s.searchbar}>\r\n            <form onSubmit={handleSubmit} className={s.searchForm}>\r\n                <button type=\"submit\" aria-label=\"search\" className={s.button}>\r\n                    <span className={s.buttonLabel}>Search</span> <GoSearch />\r\n                </button>\r\n                <input\r\n                    className={s.input}\r\n                    onChange={handleChange}\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Search movies\"\r\n                    value={searchQuery}\r\n                />\r\n            </form>\r\n        </header>\r\n    );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n    onClick: propTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchBar;","import { useState, useEffect } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport * as api from '../../services/api';\r\nimport SearchBar from '../../components/SearchBar/SearchBar';\r\nimport MovieItem from '../../components/MovieItem/MovieItem';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function MoviesView() {\r\n  const [movies, setMovies] = useState(null);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const handleSearchQuery = (searchQuery) => {\r\n    history.push({ ...location, search: `query=${searchQuery}` });\r\n  };\r\n\r\n  const searchParams = new URLSearchParams(location.search).get(\"query\");\r\n\r\n  useEffect(() => {\r\n    if (location.search === '') {\r\n      return;\r\n    }\r\n\r\n    api.fetchSearchQuery(searchParams).then((data) => {\r\n      if (data.results.length === 0) {\r\n        toast.error('Nothing');\r\n        return;\r\n      }\r\n      setMovies(data.results);\r\n    });\r\n  }, [location.search, searchParams]);\r\n\r\n  return (\r\n    <>\r\n      <SearchBar onClick={handleSearchQuery} />\r\n      {movies && <MovieItem movies={movies} />}\r\n    </>\r\n  );\r\n}\r\n"],"names":["movies","location","useLocation","className","s","map","movie","to","pathname","id","state","from","src","poster_path","alt","name","width","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchQuery","searchQuery","fetchMovieById","fetchMovieCast","fetchMovieReviews","onClick","searchParams","URLSearchParams","search","get","useState","setSearchQuery","onSubmit","e","preventDefault","trim","toast","type","onChange","target","value","autoComplete","placeholder","MoviesView","setMovies","history","useHistory","useEffect","api","then","data","results","length","push","MovieItem"],"sourceRoot":""}