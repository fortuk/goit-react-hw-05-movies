{"version":3,"file":"static/js/movies-view.e24d0cea.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieItem/MovieItem.module.css?431a","components/MovieItem/MovieItem.jsx","services/api.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","views/MoviesView/MoviesView.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieItem_list__Q0rDX\",\"movieItem\":\"MovieItem_movieItem__+5IiU\",\"movieImage\":\"MovieItem_movieImage__WfxXw\"};","import { Link, useLocation } from \"react-router-dom\";\nimport s from \"./MovieItem.module.css\";\nimport propTypes from \"prop-types\";\n\nconst MovieItem = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className={s.list}>\n      {movies.map((movie) => (\n        <li key={movie.id} className={s.movieItem}>\n          <Link\n            to={{\n              pathname: `/movies/${movie.id}`,\n              state: { from: location },\n            }}\n          >\n            <img\n              className={s.movieImage}\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n              alt={movie.name}\n              width=\"320\"\n            />\n            <p>{movie.name}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\nMovieItem.propTypes = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number.isRequired,\n      name: propTypes.string.isRequired,\n      poster_path: propTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\nexport default MovieItem;\n","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d752e046a9268238157ca8971cc96b61\";\n\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok  \n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchSearchQuery(searchQuery) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCast(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBar_searchbar__xBucJ\",\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"button\":\"SearchBar_button__T7RTc\",\"buttonLabel\":\"SearchBar_buttonLabel__HaGuZ\",\"input\":\"SearchBar_input__bIy50\"};","import { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { GoSearch } from \"react-icons/go\";\nimport { toast } from \"react-toastify\";\nimport propTypes from \"prop-types\";\nimport s from \"./SearchBar.module.css\";\n\nconst SearchBar = ({ onClick }) => {\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search).get(\"query\");\n    const [searchQuery, setSearchQuery] = useState(searchParams ?? \"\");\n\n    const handleChange = (e) => {\n        setSearchQuery(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (searchQuery.trim() === \"\") {\n            toast.error(\"Enter query in the search field.\");\n            return;\n        }\n        onClick(searchQuery);\n    };\n\n    return (\n        <header className={s.searchbar}>\n            <form onSubmit={handleSubmit} className={s.searchForm}>\n                <button type=\"submit\" aria-label=\"search\" className={s.button}>\n                    <span className={s.buttonLabel}>Search</span> <GoSearch />\n                </button>\n                <input\n                    className={s.input}\n                    onChange={handleChange}\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    placeholder=\"Search movies\"\n                    value={searchQuery}\n                />\n            </form>\n        </header>\n    );\n};\n\nSearchBar.propTypes = {\n    onClick: propTypes.func.isRequired,\n};\n\nexport default SearchBar;","import { useState, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport * as api from \"../../services/api\";\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\nimport MovieItem from \"../../components/MovieItem/MovieItem\";\nimport { toast } from \"react-toastify\";\n\nexport default function MoviesView() {\n  const [movies, setMovies] = useState(null);\n  const location = useLocation();\n  const history = useHistory();\n\n  const handleSearchQuery = (searchQuery) => {\n    history.push({ ...location, search: `query=${searchQuery}` });\n  };\n\n  const searchParams = new URLSearchParams(location.search).get(\"query\");\n\n  useEffect(() => {\n    if (location.search === \"\") {\n      return;\n    }\n\n    api.fetchSearchQuery(searchParams).then((data) => {\n      if (data.results.length === 0) {\n        toast.error(\"Nothing\");\n        return;\n      }\n      setMovies(data.results);\n    });\n  }, [location.search, searchParams]);\n\n  return (\n    <>\n      <SearchBar onClick={handleSearchQuery} />\n      {movies && <MovieItem movies={movies} />}\n    </>\n  );\n}\n"],"names":["movies","location","useLocation","className","s","map","movie","to","pathname","id","state","from","src","poster_path","alt","name","width","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchQuery","searchQuery","fetchMovieById","fetchMovieCast","fetchMovieReviews","onClick","searchParams","URLSearchParams","search","get","useState","setSearchQuery","onSubmit","e","preventDefault","trim","toast","type","onChange","target","value","autoComplete","placeholder","MoviesView","setMovies","history","useHistory","useEffect","api","then","data","results","length","push","MovieItem"],"sourceRoot":""}